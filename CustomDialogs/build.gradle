plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

def versionPropsFile = file('../version.properties')
def versionBuild
def versionMajor
def versionMinor

if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    versionMajor = versionProps['VERSION_BUILD_MAJOR'].toString()
    versionMinor = versionProps['VERSION_BUILD_MINOR'].toString()
    versionBuild = versionMajor + "." + versionMinor
} else {
    throw new FileNotFoundException("Could not read version.properties!")
}

ext {
    PUBLISH_GROUP_ID = 'io.github.therandomcrafter83'
    PUBLISH_VERSION = versionBuild
    PUBLISH_ARTIFACT_ID = 'custom-dialogs'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        targetSdkVersion 31
        minSdkVersion 21
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'org.jetbrains:annotations:15.0'
}



//afterEvaluate {
//    publishing{
//        publications{
//            release(MavenPublication){
////                def versionPropsFile = file('version.properties')
////                def versionBuild
////
////                if (versionPropsFile.canRead()) {
////                    def Properties versionProps = new Properties()
////                    versionProps.load(new FileInputStream(versionPropsFile))
////                    versionBuild = versionProps['VERSION_BUILD'].toString()
////                } else {
////                    throw new FileNotFoundException("Could not read version.properties!")
////                }
////
////                from components.release
////
////
////                groupId = 'com.github.TheRandomCrafter83'
////                artifactId = 'custom-dialogs'
////                version = versionBuild
//
//            }
//        }
//    }
//}





afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'Set of custom dialogs'
                    url = 'https://github.com/TheRandomCrafter83/CustomDialogs'
                    licenses {
                        license {
                            name = 'License'
                            url = 'https://github.com/TheRandomCrafter83/CustomDialogs/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'TheRandomCrafter83'
                            name = 'Carl Williams'
                            email = 'admin@coderz-f1.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/TheRandomCrafter83/CustomDialogs.git'
                        developerConnection = 'scm:git:ssh://github.com/TheRandomCrafter83/CustomDialogs.git'
                        url = 'https://github.com/TheRandomCrafter83/CustomDialogs/tree/master/'
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.key"],
            rootProject.ext["signing.password"],
    )
    sign publishing.publications
}